<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>translate on 且听疯吟</title><link>https://blog.caoyue.me/tags/translate/</link><description>Recent content in translate on 且听疯吟</description><generator>Hugo -- gohugo.io</generator><language>zh-Hans</language><managingEditor>i@caoyue.me (caoyue)</managingEditor><webMaster>i@caoyue.me (caoyue)</webMaster><lastBuildDate>Wed, 18 Mar 2015 16:57:00 +0000</lastBuildDate><atom:link href="https://blog.caoyue.me/tags/translate/index.xml" rel="self" type="application/rss+xml"/><item><title>Efficiency Guide：关于 Erlang 效率的 8 个迷思</title><link>https://blog.caoyue.me/post/the-eight-myths-of-erlang-performance/</link><pubDate>Wed, 18 Mar 2015 16:57:00 +0000</pubDate><author>i@caoyue.me (caoyue)</author><guid>https://blog.caoyue.me/post/the-eight-myths-of-erlang-performance/</guid><description>Premature optimization is the root of all evil. -- D.E. Knuth 过早的优化是万恶之源. -- D.E. Knuth 渣翻译，且作读书笔记 :)
原文：The Eight Myths of Erlang Performance
迷思 1：Funs 很慢 funs 曾经是比较慢，不，应该说是特别慢，甚至比那个 apply/3 还慢。因为以前我们都是用一堆的语法糖啦，普通的元组啦,还有 apply/3 啦加上我们的奇技淫巧来实现的。
不过这些都是老黄历了，在 R6B 我们给了它专有的数据类型，并且在 R7B 做了更牛逼的优化，现在它的调用消耗已经降低到
本地调用和 apply/3 之间了。
不靠谱的 Note : 这里的 funs 应该是包含了 anonymous function 和 F = fun FunctionName/Arity; F(Arg1, Arg2, ..., Argn) 这些调用方式，在调用效率上这两种应该是基本等价的 在 OTP R5 和更早之前的版本中，funs 使用元组来表示，在之后的版本中有了专有的数据结构和优化1 对于参数个数已知的函数，M:F([Arg1, Arg2, &amp;hellip; , Argn]) 的调用优于 apply 使用 apply 调用的函数编译器无法优化，同时许多分析工具也无法分析其细节2 迷思 2：列表推导很慢 列表推导曾经是用 funs 来实现的，当然参照第一点，你懂的。</description></item></channel></rss>