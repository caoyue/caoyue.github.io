<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>且听疯吟</title>
  <icon>https://blog.caoyue.me/icon.png</icon>
  <subtitle>如此生活三十年</subtitle>
  <link href="https://blog.caoyue.me/atom.xml" rel="self"/>
  
  <link href="https://blog.caoyue.me/"/>
  <updated>2022-03-14T04:47:11.943Z</updated>
  <id>https://blog.caoyue.me/</id>
  
  <author>
    <name>caoyue</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于微软收购动视暴雪</title>
    <link href="https://blog.caoyue.me/post/thoughts-about-Microsoft-purchase-of-Activision-Blizzard/"/>
    <id>https://blog.caoyue.me/post/thoughts-about-Microsoft-purchase-of-Activision-Blizzard/</id>
    <published>2022-01-19T00:39:00.000Z</published>
    <updated>2022-03-14T04:47:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个初听很震撼，细想好像没什么毛病的收购。<br>不管是作为十多年暴雪全家桶玩家，还是单纯作为随着电子游戏成长起来的一代，或者说即将成为元宇宙的第一波韭菜，各种意义上都算是见证历史了。</p><p>感觉几个有意思的点：</p><h3 id="🤑-687-亿美元，现金"><a href="#🤑-687-亿美元，现金" class="headerlink" title="🤑 687 亿美元，现金"></a>🤑 687 亿美元，<strong>现金</strong></h3><p>怎么说呢，最近各种新闻也是频繁刷新我对金钱数量的认识了<br><del>恒大：和我的债务比起来就是个弟弟</del></p><h3 id="💰-只用了约一半现金储备"><a href="#💰-只用了约一半现金储备" class="headerlink" title="💰 只用了约一半现金储备"></a>💰 只用了约一半现金储备</h3><p>什么叫财大气粗啊~</p><h3 id="💸-687-亿美元大约相当于整个网易市值，约是索尼市值的一半"><a href="#💸-687-亿美元大约相当于整个网易市值，约是索尼市值的一半" class="headerlink" title="💸 687 亿美元大约相当于整个网易市值，约是索尼市值的一半"></a>💸 687 亿美元大约相当于整个网易市值，约是索尼市值的一半</h3><p>Phil Spencer 是真的厉害，毕竟能赚钱的人很多，但是能让老板一下子掏出来近 700 亿美刀的人……</p><h3 id="🎮-收购完成后，游戏业务微软排到了第三，第一是腾讯，第二是索尼"><a href="#🎮-收购完成后，游戏业务微软排到了第三，第一是腾讯，第二是索尼" class="headerlink" title="🎮 收购完成后，游戏业务微软排到了第三，第一是腾讯，第二是索尼"></a>🎮 收购完成后，游戏业务微软排到了第三，第一是腾讯，第二是索尼</h3><p>玩家：你有什么拿得出手的大作吗？<br>企鹅：啊，没有啊。<br>玩家：你有自己的硬件平台吗？<br>企鹅：啊，没有啊。<br>玩家：你有自己的平台吗？<br>企鹅：啊，没有啊。<br>玩家：那你凭什么第一？<br>企鹅：sorry，会赚钱就是为所欲为。</p><h3 id="📈-收购消息传出后，动视暴雪股票暴涨，索尼大跌，任天堂微涨，育碧-EA-双双上扬"><a href="#📈-收购消息传出后，动视暴雪股票暴涨，索尼大跌，任天堂微涨，育碧-EA-双双上扬" class="headerlink" title="📈 收购消息传出后，动视暴雪股票暴涨，索尼大跌，任天堂微涨，育碧 EA 双双上扬"></a>📈 收购消息传出后，动视暴雪股票暴涨，索尼大跌，任天堂微涨，育碧 EA 双双上扬</h3><p>只有索尼受伤的世界达成了~</p><h3 id="🤷‍♂️-今夜大量玩家跪在微软门口，他们手上举着“救救魔兽”“救救星际”“救救守望”“风暴要火”……最后只有一位举着“暗黑不朽上线”的玩家被保安拖走了，因为微软没有手机。"><a href="#🤷‍♂️-今夜大量玩家跪在微软门口，他们手上举着“救救魔兽”“救救星际”“救救守望”“风暴要火”……最后只有一位举着“暗黑不朽上线”的玩家被保安拖走了，因为微软没有手机。" class="headerlink" title="🤷‍♂️ 今夜大量玩家跪在微软门口，他们手上举着“救救魔兽”“救救星际”“救救守望”“风暴要火”……最后只有一位举着“暗黑不朽上线”的玩家被保安拖走了，因为微软没有手机。"></a>🤷‍♂️ 今夜大量玩家跪在微软门口，他们手上举着“救救魔兽”“救救星际”“救救守望”“风暴要火”……最后只有一位举着“暗黑不朽上线”的玩家被保安拖走了，因为微软没有手机。</h3><p>虽然微软没有手机，但是现在他们有糖果传奇了<br>想想 Windows 11 刚上线不久的 WSA，所以这也在你的计划之中吗阿软！</p><h3 id="😉-这波啊，利好元宇宙"><a href="#😉-这波啊，利好元宇宙" class="headerlink" title="😉 这波啊，利好元宇宙"></a>😉 这波啊，利好元宇宙</h3><p>请问核聚变和元宇宙的共同点是什么：<br>永远离我们还有五十年~</p><h3 id="最后，救救-Wow！"><a href="#最后，救救-Wow！" class="headerlink" title="最后，救救 Wow！"></a>最后，救救 Wow！</h3>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这是一个初听很震撼，细想好像没什么毛病的收购。&lt;br&gt;不管是作为十多年暴雪全家桶玩家，还是单纯作为随着电子游戏成长起来的一代，或者说即将成为元宇宙的第一波韭菜，各种意义上都算是见证历史了。&lt;/p&gt;
&lt;p&gt;感觉几个有意思的点：&lt;/p&gt;
&lt;h3</summary>
        
      
    
    
    
    
    <category term="life" scheme="https://blog.caoyue.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>夜晚的潜水艇-陈春成</title>
    <link href="https://blog.caoyue.me/post/submarine-at-night/"/>
    <id>https://blog.caoyue.me/post/submarine-at-night/</id>
    <published>2021-09-05T14:13:44.000Z</published>
    <updated>2022-03-14T04:47:11.947Z</updated>
    
    <content type="html"><![CDATA[<img src="./images/submarine-at-night.jpg" width="50%" height="50%" title="夜晚的潜水艇-陈春成"><h3 id="夜晚的潜水艇-陈春成"><a href="#夜晚的潜水艇-陈春成" class="headerlink" title="夜晚的潜水艇-陈春成"></a>夜晚的潜水艇-陈春成</h3><p>对我而言，这是一本难得的能带来纯粹的愉悦阅读体验的书了。</p><p>阅读这本书，灵魂好像被塞进一艘参杂着博尔赫斯的诗句、古老深山中炼丹炉的烟气、苏联红砖房里的单簧管、漂浮着纤毫毕现的隐秘心绪的潜水艇，在斑驳静谧的天空、大地和海底游弋。</p><p>放下书本，灵魂抽离而出，从防盗窗的空隙，钻回钢铁水泥的躯壳。<br>但至少，在某一个夜晚，有一艘蓝色的潜水艇，和一段奇异而愉悦的旅程。<br><br/></p><blockquote><p style="font-size:13px;">p.s. <br/>出于喜欢和 <del>装一把</del> 的心态（搞不好后者居多😅），在朋友圈里安利了这本书。<br/>一个朋友问我缘由，我说因为……好看，朋友玩笑表示毫无说服力。<br/><br/>在我看来读书是一件很个人的事情，你无法像吃药那样通过疗效来证明它的有效性。<br/>何况先入为主的读后感，对旁人很难说有什么用处。<br/>用俗套但有用的话来说，和书的相遇无非是缘 <del>份一道桥</del>。<br/>这只是一个契机，也许错过这次安利，终会有另一次偶遇让你看到它；<br/>也许最后你也不会看或者不喜欢这本书。<br/><br/>椋鸟不一定会找到属于自己的灰烬之歌。<br/>对社会动物来说，生活大概率并不会因此有什么影响。<br/><br/>那么，补上这篇无用的 <del>算不上理由的理由</del> 读后感，送给这个朋友吧😂<br/></p></blockquote>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;img src=&quot;./images/submarine-at-night.jpg&quot; width=&quot;50%&quot; height=&quot;50%&quot; title=&quot;夜晚的潜水艇-陈春成&quot;&gt;

&lt;h3 id=&quot;夜晚的潜水艇-陈春成&quot;&gt;&lt;a href=&quot;#夜晚的潜水艇-陈春成&quot;</summary>
        
      
    
    
    
    
    <category term="life" scheme="https://blog.caoyue.me/tags/life/"/>
    
    <category term="reading" scheme="https://blog.caoyue.me/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>鼠疫-加缪</title>
    <link href="https://blog.caoyue.me/post/La-Peste/"/>
    <id>https://blog.caoyue.me/post/La-Peste/</id>
    <published>2021-05-16T14:17:20.000Z</published>
    <updated>2022-03-14T04:47:11.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一点介绍"><a href="#一点介绍" class="headerlink" title="一点介绍"></a>一点介绍</h3><p>一个关于鼠疫爆发下，形形色色人们展现出的绝望、贪婪、疯狂，以及勇气和良知的故事。</p><h3 id="关于作品"><a href="#关于作品" class="headerlink" title="关于作品"></a>关于作品</h3><p>我看的这个版本，表述有点拖沓，缺乏一点文学上的趣味性。<br>不知道是译者的缘故还是原文如此。当然，不影响整个作品的光芒。</p><p>向来对外国人名的“脸盲”，对这些国外作品往往很难沉下心来品味。<br>但即使忽略具体行文，单纯去看整个故事，依然能感受到那种力透纸背的沉重。</p><p>习惯了文学作品中的“装腔作势”，才更能察觉到荒诞中的真实、中性和理智。</p><h3 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h3><p>困境下的贪婪与疯狂，勇气与良知，永远存在，重复上演。</p><p>不管困境来源于鼠疫、法西斯还是病毒。<br>不管在世界上的哪一个角落。</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;一点介绍&quot;&gt;&lt;a href=&quot;#一点介绍&quot; class=&quot;headerlink&quot; title=&quot;一点介绍&quot;&gt;&lt;/a&gt;一点介绍&lt;/h3&gt;&lt;p&gt;一个关于鼠疫爆发下，形形色色人们展现出的绝望、贪婪、疯狂，以及勇气和良知的故事。&lt;/p&gt;
&lt;h3 id=&quot;关于作品&quot;&gt;&lt;a</summary>
        
      
    
    
    
    
    <category term="life" scheme="https://blog.caoyue.me/tags/life/"/>
    
    <category term="reading" scheme="https://blog.caoyue.me/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Open git repository with browser in powershell</title>
    <link href="https://blog.caoyue.me/post/open-git-repository-with-browser-in-powershell/"/>
    <id>https://blog.caoyue.me/post/open-git-repository-with-browser-in-powershell/</id>
    <published>2017-06-22T01:16:00.000Z</published>
    <updated>2022-03-14T04:47:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>最近沉迷于 vscode 和 powershell 不能自拔，真的是太好用了~<br>顺便撸了一个小功能，用来直接在 powershell 中用浏览器打开对应 git repository 的地址</p><p>食用方法：</p><ul><li><p>在 powershell 中输入 <code>code $PROFILE</code> 来编辑 profile (或者你也可以使用其他的编辑器~</p></li><li><p>将以下内容添加到 profile 文件结尾并保存</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Open-GitWeb</span></span> &#123;</span><br><span class="line">    <span class="variable">$r</span> = git remote <span class="literal">-v</span> | <span class="built_in">Select-String</span> <span class="literal">-Pattern</span> <span class="string">&quot;(https:\/\/|git@)(?&lt;git&gt;.*)\.git&quot;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$r</span>.Matches.Length <span class="operator">-gt</span> <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable">$t</span> = <span class="string">&quot;https://&quot;</span> + (<span class="variable">$r</span>.Matches[<span class="number">0</span>].Groups |</span><br><span class="line">            <span class="built_in">Where-Object</span> &#123;<span class="variable">$_</span>.Name <span class="operator">-eq</span> <span class="string">&quot;git&quot;</span>&#125;).Value.Replace(<span class="string">&quot;:&quot;</span>, <span class="string">&quot;/&quot;</span>)</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;gh: openning &quot;</span>,<span class="variable">$t</span>,<span class="string">&quot;...&quot;</span> <span class="literal">-ForegroundColor</span> <span class="string">&quot;green&quot;</span></span><br><span class="line">        <span class="built_in">Start-Process</span> <span class="variable">$t</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">Write-Host</span> <span class="string">&quot;gh: not a git repository or origin not set correctly.&quot;</span> <span class="literal">-ForegroundColor</span> <span class="string">&quot;red&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Set-Alias</span> gh <span class="built_in">Open-GitWeb</span></span><br></pre></td></tr></table></figure><p>也可以从这个 <a href="https://gist.github.com/caoyue/c2e916f71e521180628bd26542edec2a" target="_blank">gist</a> 地址获取最新版本</p></li><li><p>在 powershell 中输入 <code>. $PROFILE</code> 刷新配置文件（类似于 bash 的 source)</p></li><li><p>done! 在 git repository 目录下输入 <code>gh</code> 就可以打开对应的 url 了</p></li></ul>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近沉迷于 vscode 和 powershell 不能自拔，真的是太好用了~&lt;br&gt;顺便撸了一个小功能，用来直接在 powershell 中用浏览器打开对应 git repository 的地址&lt;/p&gt;
&lt;p&gt;食用方法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在</summary>
        
      
    
    
    
    
    <category term="project" scheme="https://blog.caoyue.me/tags/project/"/>
    
    <category term="powershell" scheme="https://blog.caoyue.me/tags/powershell/"/>
    
  </entry>
  
  <entry>
    <title>一个 ASP.NET MVC HtmlHelper 的 tricks</title>
    <link href="https://blog.caoyue.me/post/asp-net-mvc-htmlhelper/"/>
    <id>https://blog.caoyue.me/post/asp-net-mvc-htmlhelper/</id>
    <published>2017-05-30T17:47:00.000Z</published>
    <updated>2022-03-14T04:47:11.947Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>先看下面一个简单的 <code>ASP.NET MVC 5</code> 的 demo：</p><ul><li><p>model</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TestModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; Ints &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>controller</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> testModel = <span class="keyword">new</span> TestModel();</span><br><span class="line">    <span class="keyword">return</span> View(testModel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">ActionName(<span class="meta-string">&quot;Index&quot;</span>), HttpPost</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Post</span>(<span class="params">TestModel testModel</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> View(testModel);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>view</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@model Test.Controllers.TestModel</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">&quot;@Url.Action(&quot;</span>Index<span class="string">&quot;)&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    @for (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        @Html.TextBoxFor(model =&gt; model.Ints[i])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> <span class="keyword">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure></li></ul><p>有没有看出什么问题？<br/><br><code>View</code> 里面的</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@for (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Html.TextBoxFor(model =&gt; model.Ints[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Model.Ints</code> 并没有初始化的情况下被使用了。</p><p>正常情况下可能会这么写：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@&#123;</span><br><span class="line">    <span class="keyword">if</span> (Model.Ints == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Model.Ints = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; Model.Ints.Count; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        @Html.TextBoxFor(model =&gt; model.Ints[i])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要 10 个 <code>input</code>，可能还得费心给 <code>Model.Ints</code> 初始化并添加 10 个 元素。</p><p>然而前面的写法真的会报错吗？<br/><br>其实并不会，it works well.</p><p>为什么呢？ <code>@Html.TextBoxFor(model =&gt; model.Ints[i])</code> 在 <code>Model.Ints</code> 并未初始化的时候就使用了，那么应该会抛出异常才对？</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>那么，我们来看看为什么没有报错。<br>这就要从源代码上找原因。</p><p>幸好，ASP.NET MVC 已经在 Github 上开源了，地址在<a href="https://github.com/ASP-NET-MVC/aspnetwebstack">这里</a></p><ul><li><p>我们很容易根据 namespace 找到 <code>Html.TextBoxFor</code> 的实现，参考 <a href="https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Mvc/Html/InputExtensions.cs#L425">https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Mvc/Html/InputExtensions.cs#L425</a></p></li><li><p>简略的说，根据方法签名追踪，可以找到 <code>InputHelper</code> 方法，即<a href="https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Mvc/Html/InputExtensions.cs#L483">https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Mvc/Html/InputExtensions.cs#L483</a></p></li><li><p>重点在这一段：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> attemptedValue = (<span class="built_in">string</span>)htmlHelper</span><br><span class="line">    .GetModelStateValue(fullName, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">tagBuilder.MergeAttribute(<span class="string">&quot;value&quot;</span>, attemptedValue ?? ((useViewData)</span><br><span class="line">    ? htmlHelper.EvalString(fullName, format)</span><br><span class="line">    : valueParameter), isExplicitValue);</span><br></pre></td></tr></table></figure><p>如果要报错，那么应该报错在 <code>htmlHelper.GetModelStateValue</code>，因为很明显这是获取 <code>Model.Ints[i]</code> 的值的地方</p></li><li><p>继续找到 <code>HtmlHelper.GetModelStateValue</code> 方法，即 <a href="https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Mvc/HtmlHelper.cs#L391">https://github.com/ASP-NET-MVC/aspnetwebstack/blob/master/src/System.Web.Mvc/HtmlHelper.cs#L391</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="built_in">object</span> <span class="title">GetModelStateValue</span>(<span class="params"><span class="built_in">string</span> key, Type destinationType</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ModelState modelState;</span><br><span class="line">    <span class="keyword">if</span> (ViewData.ModelState.TryGetValue(key, <span class="keyword">out</span> modelState))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (modelState.Value != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> modelState.Value.ConvertTo(destinationType, <span class="literal">null</span> <span class="comment">/* culture */</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重点就在于 <code>ViewData.ModelState.TryGetValue</code> 了，显然 <code>ModelState</code> 主结构是一个 <code>Dictionary</code> 来存储所有的值，这个想必大部分人都知道，所以我们绕了一圈最终找到了这里<br>也就是说，实际上是通过 <code>Dictionary.TryGetValue(key, out value)</code> 这样的形式来获取对应的值<br>具体到我们的问题，即 <code>i == 0</code> 时，在 <code>ModelState</code> 中寻找 <code>key == &quot;Ints[0]&quot;</code> 的值，当然，其值为 null 并且并不会报错</p></li></ul><p>所以整个流程中并不会因为 <code>Model.Ints</code> 未初始化而报错，因为 <code>Html.TextBoxFor(model =&gt; model.Ints[i])</code> 并不是通过直接访问而是从 expression 数据结构和 ModelState 数据绑定中取值。虽然这背后机制并不复杂，但是这个问题突然冒出来的时候，没有完整看过这部分实现，我也并没有想到这其中的关联。</p><p>最后，<strong>在使用之前初始化一定是一个好习惯！</strong></p><h3 id="附送"><a href="#附送" class="headerlink" title="附送"></a>附送</h3><p>其实比起看源码，通过 Visual Studio 来 debug 可能更方便。</p><p>那么步骤如下：</p><ul><li>找到 Tool -&gt; Options -&gt; Debugging -&gt; General</li><li>Uncheck <code>Enable Just My Code</code></li><li>Check <code>Enable Source Server Support</code></li><li>转到 Tool -&gt; Options -&gt; Debugging -&gt; Symbols</li><li>Check <code>Microsoft Symbol Servers</code></li><li>Add <code>http://referencesource.microsoft.com/symbols</code></li><li>Add <code>http://msdl.microsoft.com/download/symbols</code></li><li>Add <code>http://srv.symbolsource.org/pdb/Public</code></li><li>我也不知道哪个 symbol server 对你有效，所以就都加上吧~</li><li>如果你只需要一部分的 modules，可以选择 <code>Only specified modules</code>，比如添加 <code>System.Web.Mvc.dll</code></li></ul><p>接下来进入调试时，只要右键在当前断点上选择 <code>Step Into Specific</code> 就可以选择进入调试源码了~</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;先看下面一个简单的 &lt;code&gt;ASP.NET MVC 5&lt;/code&gt; 的</summary>
        
      
    
    
    
    
    <category term="programming" scheme="https://blog.caoyue.me/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>写模板时的一些细节</title>
    <link href="https://blog.caoyue.me/post/html-details/"/>
    <id>https://blog.caoyue.me/post/html-details/</id>
    <published>2017-05-27T19:14:00.000Z</published>
    <updated>2022-03-14T04:47:11.947Z</updated>
    
    <content type="html"><![CDATA[<p>最近从 farbox 迁移到了 bitcron，由于 bitcron 不再支持 html 的模板，只好用 jade 重写了一次<br>顺便整理了下之前写这个模板时碰到的一些细节，也许用得上吧</p><h3 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h3><p>国内很多网站都是不写这个 lang 属性的，比如 baidu。 而大部分国外网站都会写，Twitter 甚至为每一条推文都加上了 lang 属性<br>那么写上 lang 属性有什么意义呢？顾名思义，lang 属性声明了内容的语言。更详细的来说，比如:</p><ul><li><p>浏览器可以根据 <code>lang=en</code> 知道当前网页是英文，于是可以问你是否需要开启翻译功能</p></li><li><p>Chrome 在版本 21 之后，开始根据 <code>lang</code> 属性来应用不同的默认字体。这意味着你可以为英语页面和中文、日文等页面设置不同的默认字体<br/><br>这个选项没有出现在默认设置里，你可以使用这个 Chrome 扩展来设置：<a href="https://chrome.google.com/webstore/detail/advanced-font-settings/caclkomlalccbpcdllchkeecicepbmbm">Advanced Font Settings</a></p></li><li><p>页面的 lang 属性会影响字体的显示<br>比如 <code>思源黑体</code> 中同时包含了中文字体和日文字体，我们知道日文中一部分汉字是相同的，为了节省空间，所以它们被放在了“同一个位置”上<br/><br>然而即使是同样的字，也可能在字形上存在不同，比如，如果你安装了思源黑体，那么下面同样的字<br> <span lang="jp" style="font-family:'Source Han Sans';font-size:25px;">门类</span> 和 <span lang="zh-Hans" style="font-family:'Source Han Sans';font-size:25px;">门类</span></p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">lang</span>=<span class="string">&quot;ja&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family:&#x27;Source Han Sans&#x27;&quot;</span>&gt;</span>门类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Hans&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family:&#x27;Source Han Sans&#x27;&quot;</span>&gt;</span>门类<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>显示出来的字形是不一样的另外，由于中文字体 fallback 的关系，`lang=en` 下显示的是 `lang=ja` 的字形，所以，如果发现网页显示的字形很奇怪，那么看看 lang 属性有没有正确的设置吧~可以参考[这里](https://www.w3schools.com/tags/ref_language_codes.asp)来决定选择用哪个 Language Code</code></pre></li></ul><h3 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h3><ul><li><p>charset<br>千万不要忘记 <code>charset</code> 设置，否则可能会出现莫名其妙的乱码<br>一般来说是这样设置的：</p><pre><code><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></code></pre></li><li><p>viewport<br>这个就不多说了，如果做了自适应的话，应该都不会忘记这个<br/><br>可以参考 <a href="https://www.w3schools.com/css/css_rwd_viewport.asp">https://www.w3schools.com/css/css_rwd_viewport.asp</a></p></li><li><p>web app icon<br>在移动设备上，除了将网站收藏为书签外，现在还有更多快捷访问的方式，比如，固定到桌面等等。所以，相对于 favicon，我们有了更多需要设置的 icon<br/><br>比如为 iOS 设置放到主屏幕上的图标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;apple-touch-iphone.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span> <span class="attr">sizes</span>=<span class="string">&quot;72x72&quot;</span> <span class="attr">href</span>=<span class="string">&quot;apple-touch-ipad.png&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">sizes</span>=<span class="string">&quot;114x114&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;apple-touch-iphone4.png&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">    <span class="attr">rel</span>=<span class="string">&quot;apple-touch-icon&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">sizes</span>=<span class="string">&quot;144x144&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">href</span>=<span class="string">&quot;apple-touch-ipad-retina.png&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><p>相应的还有 Android，Windows 等等，所以你可能会需要<a href="(https://realfavicongenerator.net/)">这个网站</a>，一次生成支持所有平台的 html。</p></li></ul><h3 id="待续"><a href="#待续" class="headerlink" title="待续~"></a>待续~</h3>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近从 farbox 迁移到了 bitcron，由于 bitcron 不再支持 html 的模板，只好用 jade 重写了一次&lt;br&gt;顺便整理了下之前写这个模板时碰到的一些细节，也许用得上吧&lt;/p&gt;
&lt;h3 id=&quot;lang&quot;&gt;&lt;a href=&quot;#lang&quot;</summary>
        
      
    
    
    
    
    <category term="programming" scheme="https://blog.caoyue.me/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>炉石卡牌实现机制的一点猜想</title>
    <link href="https://blog.caoyue.me/post/hearthstone/"/>
    <id>https://blog.caoyue.me/post/hearthstone/</id>
    <published>2016-05-31T10:43:00.000Z</published>
    <updated>2022-03-14T04:47:11.947Z</updated>
    
    <content type="html"><![CDATA[<p>假设我们要实现一个炉石的对战机制，要怎么做呢？<br>并没有游戏开发经验，所以以下都是乱猜加瞎扯~</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>首先，我们把炉石里的主要元素分成几类：</p><ul><li><p>法术<br>法术很好理解，一般来说法术包括几个要素</p><ul><li>目标<ul><li>可能是一个目标也可能是多个目标</li><li>可能包含一个筛选，比如「对非恶魔随从造成伤害」</li></ul></li><li>效果<ul><li>可能是给目标一个 buff 或者 debuff，也可能是造成伤害等等</li><li>大部分法术都是立即效果</li><li>也有一部分法术是触发效果，比如 <code>奥秘</code>，比如 <code>本回合随从生命值不会降低到 1 点以下</code></li></ul></li></ul></li><li><p>武器</p></li><li><p>英雄</p><ul><li>英雄技能可以看作一个法术</li></ul></li><li><p>随从</p><ul><li><p>随从本身具有的属性</p><ul><li>花费&#x2F;攻击&#x2F;血量</li><li>类别： 恶魔&#x2F;鱼人&#x2F;野兽</li><li>其他<br>我们以 <a href="https://hearthstonejson.com/">https://hearthstonejson.com/</a> 上的卡牌火车王的 Json 数据为例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;EX1_116&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Leeroy Jenkins&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;&lt;b&gt;Charge&lt;/b&gt;. &lt;b&gt;Battlecry:&lt;/b&gt; Summon two 1/1 Whelps for your opponent.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rarity&quot;</span>: <span class="string">&quot;LEGENDARY&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;MINION&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;cost&quot;</span>: <span class="number">5</span>,</span><br><span class="line">    <span class="attr">&quot;attack&quot;</span>: <span class="number">6</span>,</span><br><span class="line">    <span class="attr">&quot;health&quot;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">&quot;collectible&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;set&quot;</span>: <span class="string">&quot;EXPERT1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;faction&quot;</span>: <span class="string">&quot;ALLIANCE&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;artist&quot;</span>: <span class="string">&quot;Gabe from Penny Arcade&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;flavor&quot;</span>: <span class="string">&quot;At least he has Angry Chicken.&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;mechanics&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;BATTLECRY&quot;</span>,</span><br><span class="line">        <span class="string">&quot;CHARGE&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;dust&quot;</span>: [</span><br><span class="line">        <span class="number">1600</span>,</span><br><span class="line">        <span class="number">3200</span>,</span><br><span class="line">        <span class="number">400</span>,</span><br><span class="line">        <span class="number">1600</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>随从效果</p><ul><li>即上面的 <code>mechanics</code> 数据</li><li>目前炉石包括了 <code>冲锋、亡语、发现、战吼、法术伤害、连击</code> 等等大概二十多种效果</li></ul></li></ul></li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><ul><li>法术效果<ul><li>法术效果相对来说容易归纳</li></ul></li><li>随从效果<ul><li>实际上随从效果可以认为是法术效果，比如自带亡语的随从，可以认为是通过法术给予了亡语效果——毕竟，炉石里面确实存在着这样的法术</li><li>具有亡语效果 <code>随机召唤一个法力消耗为 3 的随从</code> 的随从死亡时，可以认为是使用了一个 <code>随机召唤一个法力消耗为 3 的随从</code> 的法术</li><li>光环是一种特殊的法术效果，拥有更加复杂的触发条件，比如 <code>将你的治疗法术或技能改为造成等量的伤害</code></li></ul></li></ul><h3 id="对局"><a href="#对局" class="headerlink" title="对局"></a>对局</h3><ul><li>从对局中我们可以总结出一些规则，比如大家经常会讨论的 <code>结算顺序</code><ul><li>虽然打出一张牌表面上看起来很简单，但是背后其实包括了多个阶段，比如：<ul><li>选择战吼目标并出牌，此时扣费</li><li>登场效果触发，这个时候一部分其他卡牌的效果已经会被触发，比如 <code>任务达人</code></li><li>召唤效果触发，比如会触发 <code>送葬者</code></li><li>战吼效果触发，此时开始结算战吼效果</li><li>奥秘效果触发，这也是为什么 <code>谢娜</code> 这张牌可以先偷到复制但是自己本身并不会被复制</li><li>召唤结束，这时会触发 <code>飞刀杂耍者</code> 之类的效果<br>（结算比较复杂，而且涉及到各种死亡结算和效果，而且暴雪也没有出官方的结算规则，所以，以上只是举个栗子~</li></ul></li></ul></li></ul><ul><li>从上面的例子可以看到，不同的牌在不同的阶段触发效果<br>假设我们需要实现一张 <code>飞刀杂耍者</code>，每召唤一个随从就发射一把飞刀<ul><li>我们可以很容易分开两个角色<ul><li>系统，它担任裁判的角色</li><li>卡牌<br>这样由系统去执行整个流程，在召唤了一个随从后，通知 <code>飞刀杂耍者</code> 去执行发射飞刀的任务</li></ul></li></ul></li><li>显然我们没办法把所有卡牌逻辑都塞在 <code>系统</code> 这个角色中，假设我们有 500 张卡牌，那么 <code>系统</code> 这部分的调用代码可能会突破天际</li><li>我们也不能让 <code>飞刀杂耍者</code> 自己去监控整场对局，从而决定什么时候发射飞刀，显然这样 <code>系统</code> 这个角色就失去了其意义，代码也会无比混乱</li><li>实际上对于这样的问题，我们有一个经典的例子（或许你在面试中已经被问了无数次的 「猫叫老鼠跑人醒」）<ul><li>这就是观察者模式（事件-通知）</li><li>我们只需要让 <code>飞刀杂耍者</code> 在 <code>系统</code> 那里注册一个事件，告诉它，有随从被召唤的时候，通知我，然后由我来执行对应的逻辑</li><li><code>系统</code> 则需要维护一个注册的事件列表，比如随从被召唤的事件、随从死亡的事件等等</li><li><code>系统</code> 按结算规则来执行，并在对应的事件触发的时候，按一定的顺序去通知即可</li></ul></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>炉石包含很多不同的效果，事实上这也正是它好玩的地方，但一来暴雪没有出明确的结算规则和效果解释，有些卡牌的效果也找不到同类和规律（比如改变战吼效果的 <code>铜须</code> 光环，和改变法术执行目标的 <code>扰咒术</code> 等等），所以有些时候想总结一套规则来套用所有卡牌不太容易</li><li>对于单个的特殊的效果，hardcode 也是一个解决办法</li></ul><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>额外插一点关于炉石插件的内容，之前看到有童鞋在好奇</p><ul><li>炉石传说有一个隐藏的 debug-logging 模式，打开之后会产生非常详细的记录，通过解析这个 log 可以做到记录和获取对局信息</li><li>网易的盒子貌似额外使用了抓包解析的方法，所以功能会强大一些，比如导入导出卡组的功能</li><li>但是考虑到可能触犯 ToS ，其他插件没有这么做</li><li>log 大概是这样的：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Zone] ZoneChangeList.ProcessChanges() - id=1 local=False [name=Garrosh Hellscream id=4 zone=PLAY zonePos=0 cardId=HERO_01 player=1] zone from -&gt; FRIENDLY PLAY (Hero)</span><br></pre></td></tr></table></figure><ul><li>可以看出 log 是非常详细的，包含各种事件的触发</li><li>解析完整的 log 可以帮助理解整个炉石的事件机制</li></ul></li><li>当初想要自己实现盒子的时候参考过这篇文章 <a href="https://www.reddit.com/r/hearthstone/comments/268fkk/simple_hearthstone_logging_see_your_complete_play">https://www.reddit.com/r/hearthstone/comments/268fkk/simple_hearthstone_logging_see_your_complete_play</a></li><li>当然现在很多开源的插件了，比如 <a href="https://github.com/HearthSim/Hearthstone-Deck-Tracker">https://github.com/HearthSim/Hearthstone-Deck-Tracker</a></li></ul><h3 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h3><p>想到哪写到哪，有什么想法再补充吧 &#x3D;-&#x3D;</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;假设我们要实现一个炉石的对战机制，要怎么做呢？&lt;br&gt;并没有游戏开发经验，所以以下都是乱猜加瞎扯~&lt;/p&gt;
&lt;h3 id=&quot;分类&quot;&gt;&lt;a href=&quot;#分类&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="programming" scheme="https://blog.caoyue.me/tags/programming/"/>
    
  </entry>
  
  <entry>
    <title>晒书：《魔兽世界编年史》</title>
    <link href="https://blog.caoyue.me/post/wow-chronicle/"/>
    <id>https://blog.caoyue.me/post/wow-chronicle/</id>
    <published>2016-04-06T14:51:00.000Z</published>
    <updated>2022-03-14T04:47:11.947Z</updated>
    
    <content type="html"><![CDATA[<p>从《凯恩之书》开始就期待了，终于出了编年史<br>不负责任的猜想是暴雪觉得魔兽世界这个剧情坑太大太多懒得圆吧<br>还好终于出了</p><p>中亚还是挺快的，原来预计发货时间排到 6 月，都想去美亚订了<br>幸好还是提前发货了</p><p>大部分是为信仰充值吧<br>不过这次编年史的内容还是挺有趣的<br>有很多剧情上的填坑和重新解读<br>当然也少不了暴雪粑粑的吃书</p><p>比预计的要薄一点，但还是挺有分量的<br>这只是 Volume Ⅰ，估计后续还会有几本（SHUT UP AND TAKE MY MONEY!</p><p>印刷质量还行，但也没有到惊艳的程度。<br>意外的发现 Printed in China &#x3D;-&#x3D;</p><p>英文看得还是有点费力……<br>慢慢啃吧，有什么好玩的内容会更新在这里（大概吧~</p><p><img src="https://ww2.sinaimg.cn/mw690/3e69b0ccgw1f2n9piedyzj20qo0tftfw.jpg"><br><img src="https://ww4.sinaimg.cn/mw690/3e69b0ccgw1f2n9pbgaqij20qo0qodmy.jpg"></p><hr><p>###For the Horde!</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;从《凯恩之书》开始就期待了，终于出了编年史&lt;br&gt;不负责任的猜想是暴雪觉得魔兽世界这个剧情坑太大太多懒得圆吧&lt;br&gt;还好终于出了&lt;/p&gt;
&lt;p&gt;中亚还是挺快的，原来预计发货时间排到 6</summary>
        
      
    
    
    
    
    <category term="life" scheme="https://blog.caoyue.me/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>使用 Travis CI 自动部署 React Native 项目 （iOS 篇）</title>
    <link href="https://blog.caoyue.me/post/react-native-travis-ci-ios/"/>
    <id>https://blog.caoyue.me/post/react-native-travis-ci-ios/</id>
    <published>2016-03-09T07:21:00.000Z</published>
    <updated>2022-03-14T04:47:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>编译、测试、打包、部署这一系列的操作实在是太麻烦而且容易出错漏，能自动化的东西我们就没必要手动去点。端着咖啡悠哉地等着叮的一声，安装包出现在面前，这才是我们想要的<br>花了点时间，把正在进行的 React Native 项目的自动部署完善了一下，实现了通过 Travis CI 自动编译测试，并打包成 ipa 发布到 FTP 的整个流程<br>现在只要 Push 到 Github 上，等到 Travis CI 运行完成，就直接可以拿到 ipa 包安装测试了</p><p>准备工作：<br>首先你需要一个 Github 账户<br>Travis CI 连接 Gtihub 后，会自动检查根目录下带有 <code>.travis.yml</code> 的项目<br>关于 Travis CI 的功能和文档，请参考 <a href="https://docs.travis-ci.com/">https://docs.travis-ci.com/</a></p><p>这里给出一个 React Native 项目的 yml 文件示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">objective-c</span></span><br><span class="line"><span class="attr">osx_image:</span> <span class="string">xcode7.1</span></span><br><span class="line"><span class="attr">xcode_project:</span> <span class="string">ios/MyApp.xcodeproj</span></span><br><span class="line"><span class="attr">xcode_scheme:</span> <span class="string">MyApp</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">    <span class="attr">matrix:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">SPEC=spec1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./scripts/decrypt_key.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./scripts/add_key.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">brew</span> <span class="string">update</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">brew</span> <span class="string">reinstall</span> <span class="string">node</span> <span class="string">flow</span> <span class="string">watchman</span> <span class="string">xctool</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">react-native-cli</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">    <span class="attr">only:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./scripts/release.sh</span></span><br></pre></td></tr></table></figure><h4 id="首先设置项目编译环境："><a href="#首先设置项目编译环境：" class="headerlink" title="首先设置项目编译环境："></a>首先设置项目编译环境：</h4><p>包括 <code>language</code> 和 要使用的编译镜像 <code>osx_image</code>，并指定项目文件和编译的 scheme</p><h4 id="证书加密："><a href="#证书加密：" class="headerlink" title="证书加密："></a>证书加密：</h4><p>由于 iOS 打包过程需要一些证书密钥，这些是无法公开 Push 到 Github 的<br>虽然 Travis CI 没有提供 security file 的功能，但是提供了一个 security 的环境变量的功能<br>因此，我们可以通过在本地加密证书然后上传，线上编译时再解开来实现这一目的</p><p>比如：</p><ul><li>Encrypt</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># encrypt_key.sh</span></span><br><span class="line">openssl aes-256-cbc -k <span class="variable">$&#123;ENCRYPT_PASS&#125;</span> -<span class="keyword">in</span> scripts/MyAppdev.mobileprovision -out scripts/MyAppdev.mobileprovision.enc -a</span><br><span class="line">openssl aes-256-cbc -k <span class="variable">$&#123;ENCRYPT_PASS&#125;</span> -<span class="keyword">in</span> scripts/dist.cer -out scripts/dist.cer.enc -a</span><br><span class="line">openssl aes-256-cbc -k <span class="variable">$&#123;ENCRYPT_PASS&#125;</span> -<span class="keyword">in</span> scripts/dist.p12 -out scripts/dist.p12.enc -a</span><br></pre></td></tr></table></figure><ul><li>Decrypt</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># decrypt_key.sh</span></span><br><span class="line">openssl aes-256-cbc -k <span class="variable">$&#123;ENCRYPT_PASS&#125;</span> -<span class="keyword">in</span> scripts/MyAppdev.mobileprovision.enc -out scripts/MyAppdev.mobileprovision -d -a</span><br><span class="line">openssl aes-256-cbc -k <span class="variable">$&#123;ENCRYPT_PASS&#125;</span> -<span class="keyword">in</span> scripts/dist.cer.enc -out scripts/dist.cer -d -a</span><br><span class="line">openssl aes-256-cbc -k <span class="variable">$&#123;ENCRYPT_PASS&#125;</span> -<span class="keyword">in</span> scripts/dist.p12.enc -out scripts/dist.p12 -d -a</span><br></pre></td></tr></table></figure><p><strong>注意： 请不要直接上传你的证书和密钥！也不要把密码上传到公开的地方！</strong></p><h4 id="导入证书到-Travis-编译环境："><a href="#导入证书到-Travis-编译环境：" class="headerlink" title="导入证书到 Travis 编译环境："></a>导入证书到 Travis 编译环境：</h4><p>参考下面的步骤：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># add_key.sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a custom keychain</span></span><br><span class="line">security create-keychain -p travis ios-build.keychain</span><br><span class="line"></span><br><span class="line"><span class="comment"># Make the custom keychain default, so xcodebuild will use it for signing</span></span><br><span class="line">security default-keychain -s ios-build.keychain</span><br><span class="line"></span><br><span class="line"><span class="comment"># Unlock the keychain</span></span><br><span class="line">security unlock-keychain -p travis ios-build.keychain</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set keychain timeout to 1 hour for long builds</span></span><br><span class="line"><span class="comment"># see http://www.egeek.me/2013/02/23/jenkins-and-xcode-user-interaction-is-not-allowed/</span></span><br><span class="line">security set-keychain-settings -t 3600 -l ~/Library/Keychains/ios-build.keychain</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add certificates to keychain and allow codesign to access them</span></span><br><span class="line">security import ./scripts/apple.cer -k ~/Library/Keychains/ios-build.keychain -T /usr/bin/codesign</span><br><span class="line">security import ./scripts/dist.cer -k ~/Library/Keychains/ios-build.keychain -T /usr/bin/codesign</span><br><span class="line">security import ./scripts/dist.p12 -k ~/Library/Keychains/ios-build.keychain -P <span class="variable">$KEY_PASS</span> -T /usr/bin/codesign</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Put the provisioning profile in place</span></span><br><span class="line">mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles</span><br><span class="line">cp <span class="string">&quot;./scripts/MyAppdev.mobileprovision&quot;</span> ~/Library/MobileDevice/Provisioning\ Profiles/</span><br></pre></td></tr></table></figure><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><p>安装编译所需要的环境，比如 xctool、node、npm、react-native 等等</p><h4 id="编译和打包"><a href="#编译和打包" class="headerlink" title="编译和打包"></a>编译和打包</h4><p>举个栗子：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># release.sh</span></span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line">react-native bundle --dev <span class="literal">false</span> --platform ios \</span><br><span class="line">    --bundle-output <span class="string">&quot;/tmp/main.jsbundle&quot;</span> --entry-file index.ios.js</span><br><span class="line"></span><br><span class="line">xctool -project ios/MyApp.xcodeproj -scheme MyApp build -sdk iphoneos \</span><br><span class="line">    configuration Release OBJROOT=<span class="variable">$PWD</span>/build SYMROOT=<span class="variable">$PWD</span>/build</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ $? != 0 ]];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt; build failed&quot;</span></span><br><span class="line">     <span class="built_in">exit</span> 1;</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">PROVISIONING_PROFILE=<span class="string">&quot;<span class="variable">$HOME</span>/Library/MobileDevice/Provisioning Profiles/MyAppdev.mobileprovision&quot;</span></span><br><span class="line">OUTPUTDIR=<span class="string">&quot;<span class="variable">$PWD</span>/build/Release-iphoneos&quot;</span></span><br><span class="line">NAME=Esports_<span class="variable">$&#123;TRAVIS_COMMIT:0:6&#125;</span>.ipa</span><br><span class="line"></span><br><span class="line">xcrun -<span class="built_in">log</span> -sdk iphoneos PackageApplication <span class="string">&quot;<span class="variable">$OUTPUTDIR</span>/MyApp.app&quot;</span> \</span><br><span class="line">    -o <span class="string">&quot;<span class="variable">$OUTPUTDIR</span>/<span class="variable">$NAME</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ $? != 0 ]];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">&quot;&gt;&gt; package application failed&quot;</span></span><br><span class="line">     <span class="built_in">exit</span> 1;</span><br><span class="line"> <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$OUTPUTDIR</span></span><br><span class="line">curl --ftp-create-dirs -T <span class="string">&quot;<span class="variable">$NAME</span>&quot;</span> -u <span class="variable">$FTP_USER</span>:<span class="variable">$FTP_PASSWORD</span> \</span><br><span class="line">    ftp://<span class="variable">$FTP_SERVER</span>/esports/<span class="variable">$NAME</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt; &#123;<span class="variable">$NAME</span>&#125; uploaded!&quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;&gt;&gt; all done!&quot;</span></span><br></pre></td></tr></table></figure><p>基本上和本地编译运行 React Native 项目类似，不同之处在于使用了 xctool 命令行来编译</p><ul><li>首先安装依赖 package</li><li>然后 react-native bundle （如果使用 online 的模式，可以忽略这一步）</li><li>使用 xctool 编译和测试项目</li><li>打包 App 为 ipa 文件</li><li>FTP 发布（Travis CI 支持多种发布方式，可以参考文档实现）</li><li>完成，邮件或 IM 通知（如果你需要）</li></ul><hr><p>ref: <a href="https://www.objc.io/issues/6-build-tools/travis-ci/">https://www.objc.io/issues/6-build-tools/travis-ci/</a></p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;编译、测试、打包、部署这一系列的操作实在是太麻烦而且容易出错漏，能自动化的东西我们就没必要手动去点。端着咖啡悠哉地等着叮的一声，安装包出现在面前，这才是我们想要的&lt;br&gt;花了点时间，把正在进行的 React Native 项目的自动部署完善了一下，实现了通过 Travis</summary>
        
      
    
    
    
    
    <category term="programming" scheme="https://blog.caoyue.me/tags/programming/"/>
    
    <category term="react" scheme="https://blog.caoyue.me/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>react and react native</title>
    <link href="https://blog.caoyue.me/post/react-and-react-native/"/>
    <id>https://blog.caoyue.me/post/react-and-react-native/</id>
    <published>2015-10-27T12:20:00.000Z</published>
    <updated>2022-03-14T04:47:11.943Z</updated>
    
    <content type="html"><![CDATA[<p>最近了解了下 react 和 react native，感觉看到了一条成为「Full-stack Developer」的捷径啊（雾</p><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul><li><p>消息同步<br>不管是 Web 还是 Native 应用，一个很麻烦的问题就是保持某个 Message 在不同 View 之间的状态同步。<br>比如，收到一条消息，需要在未读标签显示状态和数字，然后未读列表中插入一条消息记录。<br>阅读消息后，需要从未读中去掉这条记录，同时在已读中新增一条记录，还不能忘了将未读数字减去。<br>我们是怎么处理这种情况？<br>要在接收消息的 handler 中判断各个 View 当前的状态，然后根据对应的状态写不同的处理代码，阅读消息同理。当然高端点的可能自己搞个 Manager 之类的东西去对这些逻辑进行管理。<br>但是，并没有什么用。一旦业务复杂，处理和 Debug 起来就很麻烦了。看上去未读是 1，点进去发现是空，这种场景想必见得也不少了。</p><pre><code>还记得很久之前我们怎么写页面的吗？（多久？大概到 ASP 吧=-=</code></pre><p>那时候我们没有这么多烦恼。因为我们是这么干的。不管什么操作，ok，刷新页面，可以保证所有状态都是正确的，so easy!<br> React + Flux 所做的正和我们很久之前的做法有点像。数据更新了？重新渲染一遍 View 不就好了。<br>但是将整个 DOM 重新渲染一遍是开销很大的，当然不可能真的这么做。<br>所以就有了 Virtual DOM。<br>其实我们对 View 所做的操作大部分都是修改内容，比如修改某个块里面的文字啦，对某个 list 增删改啦。这些都不需要完全重绘。<br>React 做到了「智能」去更新 DOM，只改变需要改变的地方。（嗯，就是不相信你能写出高效正确的操作 DOM 的代码，所以我们都帮你写好啦~（雾</p></li><li><p>组件化<br>通常我们的页面上的控件都是带有不同的状态的，比如选框是否选中等等。而不同情况下状态可能会根据一些参数去变化，这让一般情况下的组件复用变得很麻烦。<br>而 React 可以做到类似于函数的给定输入参数，输出固定的状态，可以很方便的实现 Web Components，也不会出现组件状态上的冲突。<br>而组件化的开发带来的效率提升是非常高的。</p></li><li><p>其他<br>另外经常看到人说 HTML 嵌在 JS 里面感觉很奇怪是不是模板耦合在代码里面之类的，我倒是觉得这种写法挺简洁优雅的。如果把 JSX 里面的 XML 看作是一个 XML 表示的 Object，这样理解可能会好点吧。当然你也可以使用纯 JS 的方式去写。</p></li></ul><p>好的东西往往是看上去简单实现复杂。<br>Java 本身虽然不怎么样，但是它可以让不同水平的人写出能够达到标准的代码，依然坚挺不是没有理由的。<br>所以我多少也有些认同 react 可以让不同水平的前端工程师写出符合效用的代码这个说法了。<br>算是一点并没有深入研究过前端的人的一点想法吧。</p><h3 id="React-Native"><a href="#React-Native" class="headerlink" title="React Native"></a>React Native</h3><p>最近公司同时在做某个应用的 iOS 和 Android 版本，虽然没有参与开发，但是从两边的进程来看，大部分时间其实是把同一份逻辑翻译成 Objective-C 和 Java，但是这也是没办法的事情。<br>毕竟现有的 Hybrid App 方案表现都不太理想， Native 的优势暂时无法替代。如果可以借鉴 React 的优势和开发效率，同时带来 Native 的体验，excited！<br>所以 React Native 就顺理成章了。<br>难得的是 React 没有提「Write once, run anywhere」（JAVA：&#x3D;-&#x3D;）<br>而是 「<strong>Learn once, write anywhere</strong>」。</p><p>目前感觉除了基于 React 本身的那些优势外，React Native 在开发 App 方面也是很爽的</p><ul><li>效果<br>WebView 总是让我们感觉没有 Native 那么顺畅自然，大概是因为触摸反馈之类的原因吧。React Native 在这方面则没有这个问题，可以非常容易的用到 Native 的触摸和动画效果</li><li>flex 布局<br>熟悉 Web 那一套的话用起来还是很方便的。但是 React Native 的 flex 只是 Web 的 Lite 版，虽然尽力去做 Native 兼容，但是表现能力不如 Web 也不如 Native 是必然的，幸好移动端布局通常没有 Web 那么复杂。</li><li>组件化<br>React Native 提供了基本组件，通过自己组合，可以做出很多意想不到的效果。加上通过 npm 可以引入其他开源的组件，组合出一个 App 更加容易了。</li><li>效率<br>从安装 Xcode 到 写出一个新闻列表功能只花了两个小时，虽然之前完全没有接触过 iOS 开发。大公司项目这种提供详细文档和 starterkit 的作风真是太赞。</li><li>调试方便<br>即时刷新，用调试 Web 的方式调 App 真的很爽</li><li>集成到现有 App<br>可以将某个 React Native 实现的部分集成到现有 App 中，对已有的业务不产生影响</li></ul><p>缺点也有：</p><ul><li>平台<br>除了一些容易抽象的组件比如 ListView，View，Text 之外，目前很多组件是限于平台的。这点也是可以理解的，毕竟不同平台的 API 千差万别，很难做到通用。所以想要一次开发之后小小修改就可以通吃的可以醒醒了 &#x3D;-&#x3D;<br>这也导致实际上还是无法绕开去，必须要了解 Native 开发的一些组件和细节。比如在 iOS 中，首先你需要放一个 Tabbar，然后每个 Tabbar Item 里面放一个 Navigator，这和 Native 开发其实是差不多的模式。单纯从做 Web 过来的人，还是需要去学习这些东西才能开始。<br>但是比起完整使用 Native 开发，这个学习时间要短得多。</li><li>表现能力<br>虽然 React Native 的表现能力不如 Native ，但是它并不是为了取代 Native 开发存在的。在需要的领域做得足够好，这就够了。</li><li>第三方库<br>包括 React 和 React-Native 都有这个问题。事实上由于 Virtual DOM 和 React 革命性的架构方式，以往的第三方库很难做到直接可用了。而 React 的可用第三方库还不够多，当然社区还是挺活跃的，相信这个问题会好转。</li><li>成熟度<br>随着项目变大和引入的 package 变多，你会发现越来越多的莫名奇妙的出错和 bug，这个时候你需要耐心，放狗去搜。最容易找到解决方案的地方还是 Github 上的 issue list。有很多人会碰到同样的问题，也很可能会有人在下面给出解决的方法或是方向。当然，你也可以 subscribe 这个 issue，等待官方哪天大发慈悲解决掉它。</li><li>更新速度<br>更新太快有好处也有坏处。当你发现新版本解决了一个问题，迫不及待的想要更新的时候，可能发现：你的 App 挂了；第三方组件挂了；你必须升级一堆 package，并解决可能与之相关的问题。当然啦，大部分情况下还是没有那么蛋疼的。</li></ul><hr><p>虽然接触的时间不长，也有碰到一些小坑，但是目前看来，对我这种不会 Native 开发的人来说，React Native 是个非常不错的选择。<br>也许有时间会写写碰到过的坑和一些学习的建议之类的 :-)</p>]]></content>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;最近了解了下 react 和 react native，感觉看到了一条成为「Full-stack Developer」的捷径啊（雾&lt;/p&gt;
&lt;h3 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot;</summary>
        
      
    
    
    
    
    <category term="programming" scheme="https://blog.caoyue.me/tags/programming/"/>
    
    <category term="react" scheme="https://blog.caoyue.me/tags/react/"/>
    
  </entry>
  
</feed>
